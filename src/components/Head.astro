---
import '../styles/global.css';

import '@fontsource/parkinsans/400.css';
import '@fontsource/parkinsans/600.css';

import parken400 from '@fontsource/parkinsans/files/parkinsans-latin-400-normal.woff2';
import parken600 from '@fontsource/parkinsans/files/parkinsans-latin-600-normal.woff2';

import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const {
  title,
  description,
  image = 'https://utfs.io/f/7c236dd9-5c3b-4e68-ac92-2741708553fd-oymriy.png',
} = Astro.props;
---

<!-- Global Metadata -->
<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link
  rel='icon'
  type='image/svg+xml'
  href='https://utfs.io/f/fce7dbfd-81b5-49b9-93c3-73b673beb23b-ephj4t.svg'
  media='(prefers-color-scheme: dark)'
/>
<link
  rel='icon'
  type='image/svg+xml'
  href='https://utfs.io/f/fce7dbfd-81b5-49b9-93c3-73b673beb23b-ephj4t.svg'
  media='(prefers-color-scheme: light)'
/>
<link rel='icon' type='image/x-icon' href='/favicon-light.svg' />
<meta name='generator' content={Astro.generator} />

<!-- Font preloads -->
<link rel='preload' href={parken400} as='font' type='font/woff2' crossorigin />
<link rel='preload' href={parken600} as='font' type='font/woff2' crossorigin />

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name='title' content={title} />
<meta name='description' content={description} />
<link rel='manifest' href='site.webmanifest' />
<!-- Open Graph / Facebook -->
<meta property='og:type' content='website' />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image, Astro.url)} />
<!-- Sitemap -->
<link rel='sitemap' href='/sitemap-index.xml' />
<ClientRouter />

<script>
  // Import type definition for Astro's transition event handling
  import type { TransitionBeforeSwapEvent } from 'astro:transitions/client';

  // Listen for Astro page transitions before content swap
  document.addEventListener('astro:before-swap', (e) => {
    // Remove preloaded font links from the new document to avoid conflicts
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach((link) => link.remove());
  });
</script>

<script is:inline>
  function init() {
    preloadTheme(); // Load theme preference
    onScroll(); // Handle scrolling behavior
    animate(); // Trigger animations on page load

    // Back-to-top button event listener
    const backToTop = document.getElementById('back-to-top');
    backToTop?.addEventListener('click', (event) => scrollToTop(event));

    // Back-to-previous-page button event listener
    const backToPrev = document.getElementById('back-to-prev');
    backToPrev?.addEventListener('click', () => window.history.back());

    // Theme switch buttons event listeners
    const lightThemeButton = document.getElementById('light-theme-button');
    lightThemeButton?.addEventListener('click', () => {
      localStorage.setItem('theme', 'light'); // Save theme preference
      toggleTheme(false); // Apply light theme
    });

    const darkThemeButton = document.getElementById('dark-theme-button');
    darkThemeButton?.addEventListener('click', () => {
      localStorage.setItem('theme', 'dark'); // Save theme preference
      toggleTheme(true); // Apply dark theme
    });

    const systemThemeButton = document.getElementById('system-theme-button');
    systemThemeButton?.addEventListener('click', () => {
      localStorage.setItem('theme', 'system'); // Save system theme preference
      toggleTheme(window.matchMedia('(prefers-color-scheme: dark)').matches); // Match system setting
    });

    // Auto-update theme when system preference changes
    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', (event) => {
        if (localStorage.theme === 'system') {
          toggleTheme(event.matches);
        }
      });

    // Detect scroll events
    document.addEventListener('scroll', onScroll);
  }

  // Function to animate elements with the "animate" class
  function animate() {
    const animateElements = document.querySelectorAll('.animate');

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add('show'); // Add "show" class with a delay
      }, index * 100);
    });
  }

  // Function to handle scroll behavior (adds a "scrolled" class when scrolling)
  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add('scrolled');
    } else {
      document.documentElement.classList.remove('scrolled');
    }
  }

  // Smooth scroll to top functionality
  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  }

  // Function to toggle between light and dark themes
  function toggleTheme(dark) {
    const css = document.createElement('style');

    // Disable all transitions temporarily to prevent flickering
    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `
      )
    );

    document.head.appendChild(css);

    // Apply the dark or light mode
    if (dark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    // Force repaint before removing the CSS rule
    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  // Function to preload theme settings from local storage
  function preloadTheme() {
    // Retrieve user preference from local storage
    const userTheme = localStorage.getItem('theme');

    // If a user preference exists, apply it
    if (userTheme === 'light' || userTheme === 'dark') {
      toggleTheme(userTheme === 'dark');
    } else {
      // Default to system theme (if not set, default to dark mode)
      toggleTheme(window.matchMedia('(prefers-color-scheme: dark)').matches);
    }
  }

  // Run initialization when the document is loaded
  document.addEventListener('DOMContentLoaded', () => init());

  // Re-run initialization after Astro page swaps
  document.addEventListener('astro:after-swap', () => init());

  // Preload the theme as soon as the script loads
  preloadTheme();
</script>

